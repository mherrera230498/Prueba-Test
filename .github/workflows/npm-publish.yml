name: Node.js Package

on:
  push:
    branches: [ main ]  
  #pull_request:
  #  branches: [ main ]
  
env:
  NODE_VERSION: 18
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_VERSION: ${{ format('{0}-{1}', github.run_id, github.run_number) }}
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: my_eks_cluster
  HELM_CHART_DIRECTORY: node_chart/

jobs:
  #build-and-test:
  #  if: always()
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v3
  #    - uses: actions/setup-node@v3
  #      with:
  #        node-version: ${{ env.NODE_VERSION }}
  #    - run: npm ci
  #    - run: npm run build --if-present
  #    - run: npx jest --coverage
  #    
  #eslint:
  #  if: always()
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v3
  #    - uses: actions/setup-node@v3
  #      with:
  #        node-version: ${{ env.NODE_VERSION }}
  #    - run: npm ci
  #    - run: npx eslint .
  #    
  #snyk:
  #  if: always()
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@master
  #    - uses: snyk/actions/node@master
  #      env:
  #        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #      with:
  #        args: --severity-threshold=high --all-projects
          
  docker-build:
    if: always()
    #needs: [build-and-test, eslint, snyk]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        if: github.event_name != 'pull_request'
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.IMAGE_VERSION }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
  dev-deploy:
    if: |
      always() &&
      ${{ github.ref == 'refs/heads/main' }}
    needs: [docker-build]
    environment: 
      name: dev
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
      - run: |
          helm upgrade --install -n {{ vars.HELM_NAMESPACE }} --create-namespace ${{ github.repository }} ${{ env.HELM_CHART_DIRECTORY }} \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ env.IMAGE_VERSION }}
      - run: sleep 10 && helm test ${{ github.repository }} -n {{ vars.HELM_NAMESPACE }}
          
  #prod-deploy:
  #  if: |
  #    always() &&
  #    ${{ github.ref == 'refs/heads/main' }}
  #  needs: [dev-deploy]
  #  environment: 
  #    name: prod
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Configure AWS Credentials
  #      uses: aws-actions/configure-aws-credentials@v2
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: ${{ env.AWS_REGION }}
  #    - run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
  #    - run: kubectl get svc
